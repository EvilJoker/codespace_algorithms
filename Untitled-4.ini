/**
 * 题目名称：最大子矩阵和问题

 * 题目理解：
 * 给定一个 m x n 的矩阵（二维数组）matrix，求其中元素和最大的子矩阵。子矩阵是指矩阵中任意连续的一行或一列元素组成的矩形区域。

 * 解题思路：
 * 使用 Kadane's Algorithm 的二维扩展版本解决此问题。Kadane's Algorithm 通常用于一维数组中的最大子序列和问题，对于二维数组，我们可以先对每一行应用一维的 Kadane’s Algorithm 找到每行的最大子序列和及其起始位置，然后通过遍历这些行最大子序列和，在此基础上进行动态规划来找到跨越多行且和最大的子矩阵。
   - 初始化：定义一个二维数组 dp，dp[i][j] 存储以 matrix[i][j] 结尾的最大子矩阵和。
   - 对于每一行，计算当前行每个连续子序列的最大和，并更新 dp 数组。
   - 对于 dp 数组，比较相邻两行的最大子矩阵和，若前一行的某个子序列和加上当前行某个元素大于当前行对应的 dp 值，则更新 dp 值，同时记录下最大子矩阵左上角的坐标。
   

 * 注意要点：
   - 在遍历过程中需要维护两个变量，分别存储当前行的最大子矩阵和以及其起始索引，以便在处理下一行时进行比较与合并。
   - 时间复杂度分析基于一维 Kadane's Algorithm 操作了 n 次，然后对 m 行进行了这样的操作，因此总时间复杂度是 O(mn)。

 * 时间复杂度：
 * - 时间复杂度为 O(mn)，其中 m 是矩阵的行数，n 是矩阵的列数。
   - 空间复杂度为 O(min(m, n))，用于存储 dp 数组，因为只用到了 dp 数组的最后一行信息。

 */

public class MaxSubmatrixSum {
    // 计算给定矩阵的最大子矩阵和
    public static int maxSubmatrixSum(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        // 初始化 dp 数组
        int[] dp = new int[n];
        int maxSum = Integer.MIN_VALUE;
        int tempStart = 0;

        for (int i = 0; i < m; i++) {
            Arrays.fill(dp, 0); // 清零 dp 数组，准备处理新的一行
            
            // 计算当前行的最大子序列和及其起始索引
            int start = 0;
            for (int j = 0; j < n; j++) {
                dp[j] += matrix[i][j]; // 更新 dp[j]
                
                if (dp[j] > 0) { // 如果当前和大于0，则从当前位置开始累加
                    dp[j] = Math.max(dp[j], dp[j - 1] + matrix[i][j]);
                } else { // 否则重新开始计数
                    dp[j] = matrix[i][j];
                    start = j;
                }

                // 更新当前行的最大子矩阵和
                maxSum = Math.max(maxSum, dp[j]);
            }

            // 更新全局最大子矩阵和，考虑跨行的情况
            for (int j = start; j < n; j++) {
                int currentSum = dp[j];
                if (i > 0) {
                    currentSum += dp[j - 1]; // 跨越上一行的和
                }
                maxSum = Math.max(maxSum, currentSum);
            }
        }

        return maxSum;
    }

    // 示例主方法
    public static void main(String[] args) {
        int[][] matrix = {
            {1, -2, 3},
            {-4, 5, -6},
            {7, -8, 9}
        };
        System.out.println("The maximum submatrix sum is: " + maxSubmatrixSum(matrix)); // 输出：15
    }
}